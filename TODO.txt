FRONTEND: 
- Paypal integration: 
- Add same add to basket timeout as in basket on product page
- Login should go back a page if remains on the same page
-logout button clears all data (basket)
- make items in basket a link to their product page
- clean up product search page
- fix the image display of products in product page
- make basket count always updated
  

BACKEND:
  - Add timeout to tempOrder that expires after an hour? 
  - Figure way of storing images more cleanly
   - file uploads through express?
   - plug images into orders and checkout?

TODOS:

- Simple stock validation for checkout
  - Check that there is enough stock for items when user attempts to checkout
  - Checkout consists of just a get call to checkout route, where confirmation info is returned before proceeding
  - If there is not enough stock, return error to frontend
   - Decide: should frontend remove from basket? 
   - Should there be known 'out of stock' flag on items in basket in frontend?
- Implement the soft reservation system
  - Info notification in case adding to basket does not succeed, and change to the stock level of product in FE
  - Warning for low stock items, and message that stock will be reserved for x minutes
  - Decide: How to manage stock reservations for multiple items?
  - Updated route for adding to basket, that creates reservations when ls
  - Background tasks for removing reservations
  - Web sockets for notifying users that an item in their basket is out of stock
 

Later
- Add database sharding for category
- Add an index for user of orders
- Add an index for user id of baskets
- Implememt refresh tokens so that frontend requests a fresh access token if expired.
   - somehow do this without user knowledge
- Implement routine that cleans up expired tempOrders that have not been handled correctly
- Change stock reservation cleanup to non-atomic using bulkwrite. 
 - Reservation updates that throw error are passed to task queue to be dealt with instead of whole op failing
- Add indexing to orderNumber, as generateOrderNumber() searches for documents in this field on each createOrder
  

