FRONTEND:


BACKEND:
  - Fix the stock reducing route so that reducing stock always works, even if greater than stock amount
  - Add timeout to tempOrder that expires after an hour? 
    - use node-cron to schedule a cleanup every 5 minutes.
      - download node-cron 

    - think of how to handle failed releases
    - Use transactions to release stock to ensure that tempOrder not released and order createOrder
  - condider how payments may need to be released or refunded
    
  - Figure way of storing images more cleanly
   - file uploads through express?
   - plug images into orders and checkout?

TODOS:

- Simple stock validation for checkout
- Implement the soft reservation system
  - Warning for low stock items, and message that stock will be reserved for x minutes
  - Decide: How to manage stock reservations for multiple items?
  - Updated route for adding to basket, that creates reservations when ls
  - Background tasks for removing reservations
  - Web sockets for notifying users that an item in their basket is out of stock
 

Later
- Add database sharding for category
- Add an index for user of orders
- Add an index for user id of baskets
- Implememt refresh tokens so that frontend requests a fresh access token if expired.
   - somehow do this without user knowledge
- Implement routine that cleans up expired tempOrders that have not been handled correctly
- Change stock reservation cleanup to non-atomic using bulkwrite. 
 - Reservation updates that throw error are passed to task queue to be dealt with instead of whole op failing
- Add indexing to orderNumber, as generateOrderNumber() searches for documents in this field on each createOrder
  

